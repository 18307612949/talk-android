package com.teambition.talk.adapter;import android.graphics.drawable.Drawable;import android.graphics.drawable.ShapeDrawable;import android.graphics.drawable.shapes.OvalShape;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import com.teambition.talk.BizLogic;import com.teambition.talk.R;import com.teambition.talk.entity.Tag;import com.teambition.talk.util.DensityUtil;import com.teambition.talk.util.ThemeUtil;import java.util.LinkedList;import java.util.List;/** * Created by wlanjie on 15/7/14. */public class AddTagAdapter extends RecyclerView.Adapter<AddTagAdapter.TagViewHolder> {    final List<Tag> mTags = new LinkedList<>();    final TagCheckChangeListener mListener;    public interface TagCheckChangeListener {        void onItemCheckedChanged(TextView textView, boolean isChecked);    }    public AddTagAdapter(TagCheckChangeListener listener) {        mListener = listener;    }    @Override    public TagViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        final View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_tag, parent, false);        return new TagViewHolder(view);    }    @Override    public void onBindViewHolder(final TagViewHolder holder, int position) {        final Tag tag = mTags.get(position);        holder.tagText.setText(tag.getName());        if (tag.isSelect()) {            holder.tagSelectImage.setVisibility(View.VISIBLE);        } else {            holder.tagSelectImage.setVisibility(View.GONE);        }        holder.itemView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (holder.tagSelectImage.getVisibility() == View.VISIBLE) {                    holder.tagSelectImage.setVisibility(View.GONE);                    tag.setIsSelect(false);                    mListener.onItemCheckedChanged(holder.tagText, false);                } else {                    holder.tagSelectImage.setVisibility(View.VISIBLE);                    tag.setIsSelect(true);                    mListener.onItemCheckedChanged(holder.tagText, true);                }            }        });    }    @Override    public int getItemCount() {        return mTags.size();    }    public void selectItem(String text) {        if (mTags.isEmpty()) return;        for (int i = 0; i < mTags.size(); i++) {            final Tag tag = mTags.get(i);            if (tag != null) {                if (text.equals(tag.getName())) {                    tag.setIsSelect(true);                    notifyItemChanged(i);                }            }        }    }    public void unselectItem(String text) {        if (mTags.isEmpty()) return;        for (int i = 0; i < mTags.size(); i++) {            final Tag tag = mTags.get(i);            if (tag != null) {                if (text.equals(tag.getName())) {                    tag.setIsSelect(false);                    notifyItemChanged(i);                }            }        }    }    public List<Tag> getItems() {        return mTags;    }    public void addItem(Tag tag) {        if (tag == null) return;        mTags.add(0, tag);        notifyItemInserted(0);    }    public void setItems(List<Tag> tags) {        if (tags == null || tags.isEmpty()) return;        for (Tag tag : tags) {            mTags.add(tag);        }        notifyDataSetChanged();    }    public static class TagViewHolder extends RecyclerView.ViewHolder {        public final TextView tagText;        public final ImageView tagSelectImage;        public TagViewHolder(View itemView) {            super(itemView);            ShapeDrawable drawable = new ShapeDrawable(new OvalShape());            final int size = DensityUtil.dip2px(itemView.getContext(), 8.0f);            drawable.setIntrinsicHeight(size);            drawable.setIntrinsicWidth(size);            drawable.setBounds(0, 0, size, size);            drawable.getPaint().setColor(itemView.getResources().getColor(R.color.colorPrimary));            tagText = (TextView) itemView.findViewById(R.id.tag_text);            tagText.setCompoundDrawables(drawable, null, null, null);            tagSelectImage = (ImageView) itemView.findViewById(R.id.tag_check);            final Drawable selectImage = ThemeUtil.getDrawableWithColor(itemView.getResources(), R.drawable.ic_save_blue, R.color.colorPrimary);            tagSelectImage.setImageDrawable(selectImage);        }    }}